"""
The schema's root query type.
"""
type Query {
  """
  Returns the currently logged in user, null if the user is not logged in.
  """
  user: User

  """
  Returns the list of users regstered.
  """
  users: [User!]!

  """
  Returns the list of vehicles available for booking.
  """
  vehicles: [Vehicle!]!

  """
  Return the list of booked vehicles.
  """
  bookings: [Booking!]!
}

"""
The schema's root mutation type.
"""
type Mutation {
  """
  Adds the newly created user when valid information provided,
  The username or an email address should not exist already.

  parameters
    email:
      User's email address
    name:
      User's name
    surname:
      User's surname
    contact:
      User's contact
    address:
      User's address
    city:
      User's city
    state:
      State (province)
    zip:
      State (province) zip code
    password:
      User's password

  Returns the SuccessMessage
  """
  signup(
    email: String!
    name: String!
    surname: String!
    contact: String!
    address: String!
    city: String!
    state: String!
    zip: String!
    password: String!
  ): SuccessMessage!

  """
  Updates the user information when valid information provided,
  The username or an email address should not exist already.

  parameters
    email:
      User's email address
    name:
      User's name
    surname:
      User's surname
    contact:
      User's contact
    address:
      User's address
    city:
      User's city
    state:
      State (province)
    zip:
      State (province) zip code
    password:
      User's current password
    newpassword:
      User's new password

  Returns the SuccessMessage
  """
  updateUser(
    email: String
    name: String
    surname: String
    contact: String
    address: String
    city: String
    state: String
    zip: String
    password: String!
    newPassword: String
  ): SuccessMessage!

  """
  Vehicle searching.

  parameters
    location:
      Where the vehicle will be picked up
    pickupDate:
      A pick up date
  """
  searchVehicles(
    location: String!
    pickupDate: String!
    returnDate: String!
  ): [Vehicle!]!

  """
  Vehicle booking.

  An admin person is allowed to book on behalf of the client.
  An email of the user to book for must be provided.

  parameters
    email:
      User's email address to book for by an admin
    vehicleId:
      A vehicle id
    pickupDate:
      A pick up date
    returnDate:
      A return date
  """
  bookVehicle(
    email: String
    vehicleId: ID!
    pickupDate: String!
    returnDate: String!
  ): SuccessMessage!

  """
  Vehicle booked cancelation.

  parameters
    bookingId:
      A booking id of the booking to cancel
  """
  cancelBooking(bookingId: ID!): SuccessMessage!

  """
  Add a new vehicle.

  Only an admin person is allowed to add the new vehicle

  parameters
    location:
      Where the vehicle will be picked up
    group:
      Vehicle group (A, B, C, D, E)
    size:
      Vehicle size (SMALL, MEDIUM, LARGE)
    name:
      Vehicle name (Toyata, BWM)
    model:
      Vehicle model (1 series for BMW, Polo for VW)
    make:
      Vehicle make (Hatchback, Sedan)
    year:
      Vehicle production year
    imageURI:
      Vehicle image uri
    status:
      Vehicle status (AVAILABLE, UNAVAILABLE)
  """
  addVehicle(
    count: Int!
    group: String!
    size: String!
    name: String!
    model: String!
    make: String!
    year: String!
    imageURI: String!
    status: String!
    location: String!
  ): SuccessMessage!

  """
  Update vehicle.

  Only an admin person is allowed to update the vehicle information

  parameters
    vehicleId:
      Vehicle id to update
    location:
      Where the vehicle will be picked up
    group:
      Vehicle group (A, B, C, D, E)
    size:
      Vehicle size (SMALL, MEDIUM, LARGE)
    name:
      Vehicle name (Toyata, BWM)
    model:
      Vehicle model (1 series for BMW, Polo for VW)
    make:
      Vehicle make (Hatchback, Sedan)
    year:
      Vehicle production year
    imageURI:
      Vehicle image uri
    status:
      Vehicle status (AVAILABLE, UNAVAILABLE)
    password:
      Password of the user who is logged in
  """
  updateVehicle(
    vehicleId: ID!
    count: Int
    group: String
    size: String
    name: String
    model: String
    make: String
    year: String
    imageURI: String
    status: String
    password: String!
    location: String
  ): SuccessMessage!

  """
  Delete vehicle.

  Only an admin person is allowed to delete the vehicle

  parameters
    vehicleId:
      Vehicle id to update
    password:
      Password of the user who is logged in
  """
  deleteVehicle(vehicleId: ID!, password: String!): SuccessMessage!

  """
  Requesting a OTP to use when changing the forgotten password.

  parameters
    email:
      A registered email to change password for

  Returns the SuccessMessage
  """
  requestReset(email: String!): SuccessMessage!

  """
  Reset the password

  parameters
    oneTimePin: A valid OTP which was requeted to change the password (Valid for an hour)
    password: A new password

  Returns the SuccessMessage
  """
  resetPassword(oneTimePin: String!, password: String!): SuccessMessage!
}

"""
The User type
"""
type User {
  """
  An id to used to identify the user
  """
  id: ID!
  """
  User's email address
  """
  email: String!
  """
  User's name
  """
  name: String!
  """
  User's surname
  """
  surname: String!
  """
  User's contact number
  """
  contact: String!
  """
  User's address
  """
  address: String!
  """
  City
  """
  city: String!
  """
  State (Province)
  """
  state: String!
  """
  State (Province) zip code
  """
  zip: String!
  """
  User bookings
  """
  bookings: [Booking!]!
  """
  User role
  """
  role: Role
}

"""
The booking type
"""
type Booking {
  id: ID!
  vehicle: Vehicle!
  user: User!
  pickupDate: String!
  returnDate: String!
  status: BookingStatus!
}

"""
The vehicle type
"""
type Vehicle {
  id: ID!
  count: Int!
  group: VehicleGroup!
  size: VehicleSize!
  name: String!
  model: String!
  make: String!
  year: String!
  imageURI: String!
  status: VehicleStatus!
  location: Location!
}

"""
The SuccessMessage type
"""
type SuccessMessage {
  message: String
}

enum Role {
  ADMIN
}

enum VehicleSize {
  SMALL
  MEDIUM
  LARGE
}

enum VehicleGroup {
  A
  B
  C
  D
  E
}

enum VehicleStatus {
  AVAILABLE
  DELETED
  UNAVAILABLE
}

enum BookingStatus {
  BOOKED
  CANCELLED
  RETURNED
}

enum Location {
  RICHARDS_BAY
  EMPANGENI
}
