// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  booking: (where?: BookingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vehicle: (where?: VehicleWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  booking: (where: BookingWhereUniqueInput) => BookingNullablePromise;
  bookings: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Booking>;
  bookingsConnection: (args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vehicle: (where: VehicleWhereUniqueInput) => VehicleNullablePromise;
  vehicles: (args?: {
    where?: VehicleWhereInput;
    orderBy?: VehicleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vehicle>;
  vehiclesConnection: (args?: {
    where?: VehicleWhereInput;
    orderBy?: VehicleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VehicleConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBooking: (data: BookingCreateInput) => BookingPromise;
  updateBooking: (args: {
    data: BookingUpdateInput;
    where: BookingWhereUniqueInput;
  }) => BookingPromise;
  updateManyBookings: (args: {
    data: BookingUpdateManyMutationInput;
    where?: BookingWhereInput;
  }) => BatchPayloadPromise;
  upsertBooking: (args: {
    where: BookingWhereUniqueInput;
    create: BookingCreateInput;
    update: BookingUpdateInput;
  }) => BookingPromise;
  deleteBooking: (where: BookingWhereUniqueInput) => BookingPromise;
  deleteManyBookings: (where?: BookingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVehicle: (data: VehicleCreateInput) => VehiclePromise;
  updateVehicle: (args: {
    data: VehicleUpdateInput;
    where: VehicleWhereUniqueInput;
  }) => VehiclePromise;
  updateManyVehicles: (args: {
    data: VehicleUpdateManyMutationInput;
    where?: VehicleWhereInput;
  }) => BatchPayloadPromise;
  upsertVehicle: (args: {
    where: VehicleWhereUniqueInput;
    create: VehicleCreateInput;
    update: VehicleUpdateInput;
  }) => VehiclePromise;
  deleteVehicle: (where: VehicleWhereUniqueInput) => VehiclePromise;
  deleteManyVehicles: (where?: VehicleWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  booking: (
    where?: BookingSubscriptionWhereInput
  ) => BookingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vehicle: (
    where?: VehicleSubscriptionWhereInput
  ) => VehicleSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "contact_ASC"
  | "contact_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "password_ASC"
  | "password_DESC"
  | "oneTimePin_ASC"
  | "oneTimePin_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "role_ASC"
  | "role_DESC";

export type Role = "ADMIN";

export type BookingStatus = "BOOKED" | "CANCELLED" | "RETURNED";

export type Location = "RICHARDS_BAY" | "EMPANGENI";

export type VehicleStatus = "AVAILABLE" | "UNAVAILABLE" | "DELETED";

export type BookingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "pickupDate_ASC"
  | "pickupDate_DESC"
  | "returnDate_ASC"
  | "returnDate_DESC"
  | "status_ASC"
  | "status_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type VehicleSize = "SMALL" | "MEDIUM" | "LARGE";

export type VehicleGroup = "A" | "B" | "C" | "D" | "E";

export type VehicleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "group_ASC"
  | "group_DESC"
  | "size_ASC"
  | "size_DESC"
  | "name_ASC"
  | "name_DESC"
  | "model_ASC"
  | "model_DESC"
  | "make_ASC"
  | "make_DESC"
  | "year_ASC"
  | "year_DESC"
  | "imageURI_ASC"
  | "imageURI_DESC"
  | "status_ASC"
  | "status_DESC"
  | "location_ASC"
  | "location_DESC";

export interface VehicleCreateInput {
  id?: Maybe<ID_Input>;
  group: VehicleGroup;
  size: VehicleSize;
  name: String;
  model: String;
  make: String;
  year: DateTimeInput;
  imageURI: String;
  status: VehicleStatus;
  location: Location;
}

export type BookingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VehicleUpsertNestedInput {
  update: VehicleUpdateDataInput;
  create: VehicleCreateInput;
}

export interface BookingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  vehicle?: Maybe<VehicleWhereInput>;
  user?: Maybe<UserWhereInput>;
  pickupDate?: Maybe<DateTimeInput>;
  pickupDate_not?: Maybe<DateTimeInput>;
  pickupDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pickupDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pickupDate_lt?: Maybe<DateTimeInput>;
  pickupDate_lte?: Maybe<DateTimeInput>;
  pickupDate_gt?: Maybe<DateTimeInput>;
  pickupDate_gte?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  returnDate_not?: Maybe<DateTimeInput>;
  returnDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnDate_lt?: Maybe<DateTimeInput>;
  returnDate_lte?: Maybe<DateTimeInput>;
  returnDate_gt?: Maybe<DateTimeInput>;
  returnDate_gte?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
  status_not?: Maybe<BookingStatus>;
  status_in?: Maybe<BookingStatus[] | BookingStatus>;
  status_not_in?: Maybe<BookingStatus[] | BookingStatus>;
  AND?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  OR?: Maybe<BookingWhereInput[] | BookingWhereInput>;
  NOT?: Maybe<BookingWhereInput[] | BookingWhereInput>;
}

export interface UserUpdateOneRequiredWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  update?: Maybe<UserUpdateWithoutBookingsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  oneTimePin_not?: Maybe<String>;
  oneTimePin_in?: Maybe<String[] | String>;
  oneTimePin_not_in?: Maybe<String[] | String>;
  oneTimePin_lt?: Maybe<String>;
  oneTimePin_lte?: Maybe<String>;
  oneTimePin_gt?: Maybe<String>;
  oneTimePin_gte?: Maybe<String>;
  oneTimePin_contains?: Maybe<String>;
  oneTimePin_not_contains?: Maybe<String>;
  oneTimePin_starts_with?: Maybe<String>;
  oneTimePin_not_starts_with?: Maybe<String>;
  oneTimePin_ends_with?: Maybe<String>;
  oneTimePin_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  resetTokenExpiry_not?: Maybe<DateTimeInput>;
  resetTokenExpiry_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiry_lt?: Maybe<DateTimeInput>;
  resetTokenExpiry_lte?: Maybe<DateTimeInput>;
  resetTokenExpiry_gt?: Maybe<DateTimeInput>;
  resetTokenExpiry_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  bookings_every?: Maybe<BookingWhereInput>;
  bookings_some?: Maybe<BookingWhereInput>;
  bookings_none?: Maybe<BookingWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BookingUpdateManyWithoutUserInput {
  create?: Maybe<
    BookingCreateWithoutUserInput[] | BookingCreateWithoutUserInput
  >;
  delete?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  set?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  disconnect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
  update?: Maybe<
    | BookingUpdateWithWhereUniqueWithoutUserInput[]
    | BookingUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | BookingUpsertWithWhereUniqueWithoutUserInput[]
    | BookingUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  updateMany?: Maybe<
    | BookingUpdateManyWithWhereNestedInput[]
    | BookingUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  surname: String;
  contact: String;
  address?: Maybe<String>;
  city: String;
  state: String;
  zip: String;
  password: String;
  oneTimePin?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  bookings?: Maybe<BookingCreateManyWithoutUserInput>;
}

export interface UserUpdateWithoutBookingsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  contact?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface BookingCreateInput {
  id?: Maybe<ID_Input>;
  vehicle: VehicleCreateOneInput;
  user: UserCreateOneWithoutBookingsInput;
  pickupDate: DateTimeInput;
  returnDate: DateTimeInput;
  status: BookingStatus;
}

export interface VehicleUpdateManyMutationInput {
  group?: Maybe<VehicleGroup>;
  size?: Maybe<VehicleSize>;
  name?: Maybe<String>;
  model?: Maybe<String>;
  make?: Maybe<String>;
  year?: Maybe<DateTimeInput>;
  imageURI?: Maybe<String>;
  status?: Maybe<VehicleStatus>;
  location?: Maybe<Location>;
}

export interface VehicleCreateOneInput {
  create?: Maybe<VehicleCreateInput>;
  connect?: Maybe<VehicleWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  contact?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  bookings?: Maybe<BookingUpdateManyWithoutUserInput>;
}

export interface BookingUpdateManyDataInput {
  pickupDate?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}

export interface UserCreateOneWithoutBookingsInput {
  create?: Maybe<UserCreateWithoutBookingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BookingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  pickupDate?: Maybe<DateTimeInput>;
  pickupDate_not?: Maybe<DateTimeInput>;
  pickupDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pickupDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pickupDate_lt?: Maybe<DateTimeInput>;
  pickupDate_lte?: Maybe<DateTimeInput>;
  pickupDate_gt?: Maybe<DateTimeInput>;
  pickupDate_gte?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  returnDate_not?: Maybe<DateTimeInput>;
  returnDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  returnDate_lt?: Maybe<DateTimeInput>;
  returnDate_lte?: Maybe<DateTimeInput>;
  returnDate_gt?: Maybe<DateTimeInput>;
  returnDate_gte?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
  status_not?: Maybe<BookingStatus>;
  status_in?: Maybe<BookingStatus[] | BookingStatus>;
  status_not_in?: Maybe<BookingStatus[] | BookingStatus>;
  AND?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  OR?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
  NOT?: Maybe<BookingScalarWhereInput[] | BookingScalarWhereInput>;
}

export interface UserCreateWithoutBookingsInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  surname: String;
  contact: String;
  address?: Maybe<String>;
  city: String;
  state: String;
  zip: String;
  password: String;
  oneTimePin?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
}

export interface BookingUpsertWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput;
  update: BookingUpdateWithoutUserDataInput;
  create: BookingCreateWithoutUserInput;
}

export interface BookingUpdateInput {
  vehicle?: Maybe<VehicleUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutBookingsInput>;
  pickupDate?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}

export interface BookingUpdateWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput;
  data: BookingUpdateWithoutUserDataInput;
}

export interface VehicleUpdateOneRequiredInput {
  create?: Maybe<VehicleCreateInput>;
  update?: Maybe<VehicleUpdateDataInput>;
  upsert?: Maybe<VehicleUpsertNestedInput>;
  connect?: Maybe<VehicleWhereUniqueInput>;
}

export interface BookingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookingWhereInput>;
  AND?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  OR?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
  NOT?: Maybe<BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput>;
}

export interface VehicleUpdateDataInput {
  group?: Maybe<VehicleGroup>;
  size?: Maybe<VehicleSize>;
  name?: Maybe<String>;
  model?: Maybe<String>;
  make?: Maybe<String>;
  year?: Maybe<DateTimeInput>;
  imageURI?: Maybe<String>;
  status?: Maybe<VehicleStatus>;
  location?: Maybe<Location>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  contact?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  resetTokenExpiry?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
}

export interface VehicleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  group?: Maybe<VehicleGroup>;
  group_not?: Maybe<VehicleGroup>;
  group_in?: Maybe<VehicleGroup[] | VehicleGroup>;
  group_not_in?: Maybe<VehicleGroup[] | VehicleGroup>;
  size?: Maybe<VehicleSize>;
  size_not?: Maybe<VehicleSize>;
  size_in?: Maybe<VehicleSize[] | VehicleSize>;
  size_not_in?: Maybe<VehicleSize[] | VehicleSize>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  model?: Maybe<String>;
  model_not?: Maybe<String>;
  model_in?: Maybe<String[] | String>;
  model_not_in?: Maybe<String[] | String>;
  model_lt?: Maybe<String>;
  model_lte?: Maybe<String>;
  model_gt?: Maybe<String>;
  model_gte?: Maybe<String>;
  model_contains?: Maybe<String>;
  model_not_contains?: Maybe<String>;
  model_starts_with?: Maybe<String>;
  model_not_starts_with?: Maybe<String>;
  model_ends_with?: Maybe<String>;
  model_not_ends_with?: Maybe<String>;
  make?: Maybe<String>;
  make_not?: Maybe<String>;
  make_in?: Maybe<String[] | String>;
  make_not_in?: Maybe<String[] | String>;
  make_lt?: Maybe<String>;
  make_lte?: Maybe<String>;
  make_gt?: Maybe<String>;
  make_gte?: Maybe<String>;
  make_contains?: Maybe<String>;
  make_not_contains?: Maybe<String>;
  make_starts_with?: Maybe<String>;
  make_not_starts_with?: Maybe<String>;
  make_ends_with?: Maybe<String>;
  make_not_ends_with?: Maybe<String>;
  year?: Maybe<DateTimeInput>;
  year_not?: Maybe<DateTimeInput>;
  year_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  year_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  year_lt?: Maybe<DateTimeInput>;
  year_lte?: Maybe<DateTimeInput>;
  year_gt?: Maybe<DateTimeInput>;
  year_gte?: Maybe<DateTimeInput>;
  imageURI?: Maybe<String>;
  imageURI_not?: Maybe<String>;
  imageURI_in?: Maybe<String[] | String>;
  imageURI_not_in?: Maybe<String[] | String>;
  imageURI_lt?: Maybe<String>;
  imageURI_lte?: Maybe<String>;
  imageURI_gt?: Maybe<String>;
  imageURI_gte?: Maybe<String>;
  imageURI_contains?: Maybe<String>;
  imageURI_not_contains?: Maybe<String>;
  imageURI_starts_with?: Maybe<String>;
  imageURI_not_starts_with?: Maybe<String>;
  imageURI_ends_with?: Maybe<String>;
  imageURI_not_ends_with?: Maybe<String>;
  status?: Maybe<VehicleStatus>;
  status_not?: Maybe<VehicleStatus>;
  status_in?: Maybe<VehicleStatus[] | VehicleStatus>;
  status_not_in?: Maybe<VehicleStatus[] | VehicleStatus>;
  location?: Maybe<Location>;
  location_not?: Maybe<Location>;
  location_in?: Maybe<Location[] | Location>;
  location_not_in?: Maybe<Location[] | Location>;
  AND?: Maybe<VehicleWhereInput[] | VehicleWhereInput>;
  OR?: Maybe<VehicleWhereInput[] | VehicleWhereInput>;
  NOT?: Maybe<VehicleWhereInput[] | VehicleWhereInput>;
}

export type VehicleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookingUpdateManyMutationInput {
  pickupDate?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}

export interface UserUpsertWithoutBookingsInput {
  update: UserUpdateWithoutBookingsDataInput;
  create: UserCreateWithoutBookingsInput;
}

export interface BookingCreateManyWithoutUserInput {
  create?: Maybe<
    BookingCreateWithoutUserInput[] | BookingCreateWithoutUserInput
  >;
  connect?: Maybe<BookingWhereUniqueInput[] | BookingWhereUniqueInput>;
}

export interface BookingCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  vehicle: VehicleCreateOneInput;
  pickupDate: DateTimeInput;
  returnDate: DateTimeInput;
  status: BookingStatus;
}

export interface BookingUpdateWithoutUserDataInput {
  vehicle?: Maybe<VehicleUpdateOneRequiredInput>;
  pickupDate?: Maybe<DateTimeInput>;
  returnDate?: Maybe<DateTimeInput>;
  status?: Maybe<BookingStatus>;
}

export interface BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput;
  data: BookingUpdateManyDataInput;
}

export interface VehicleUpdateInput {
  group?: Maybe<VehicleGroup>;
  size?: Maybe<VehicleSize>;
  name?: Maybe<String>;
  model?: Maybe<String>;
  make?: Maybe<String>;
  year?: Maybe<DateTimeInput>;
  imageURI?: Maybe<String>;
  status?: Maybe<VehicleStatus>;
  location?: Maybe<Location>;
}

export interface VehicleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VehicleWhereInput>;
  AND?: Maybe<VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput>;
  OR?: Maybe<VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput>;
  NOT?: Maybe<VehicleSubscriptionWhereInput[] | VehicleSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VehiclePreviousValues {
  id: ID_Output;
  group: VehicleGroup;
  size: VehicleSize;
  name: String;
  model: String;
  make: String;
  year: DateTimeOutput;
  imageURI: String;
  status: VehicleStatus;
  location: Location;
}

export interface VehiclePreviousValuesPromise
  extends Promise<VehiclePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group: () => Promise<VehicleGroup>;
  size: () => Promise<VehicleSize>;
  name: () => Promise<String>;
  model: () => Promise<String>;
  make: () => Promise<String>;
  year: () => Promise<DateTimeOutput>;
  imageURI: () => Promise<String>;
  status: () => Promise<VehicleStatus>;
  location: () => Promise<Location>;
}

export interface VehiclePreviousValuesSubscription
  extends Promise<AsyncIterator<VehiclePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group: () => Promise<AsyncIterator<VehicleGroup>>;
  size: () => Promise<AsyncIterator<VehicleSize>>;
  name: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  make: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageURI: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<VehicleStatus>>;
  location: () => Promise<AsyncIterator<Location>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  surname: String;
  contact: String;
  address?: String;
  city: String;
  state: String;
  zip: String;
  password: String;
  oneTimePin?: String;
  resetTokenExpiry?: DateTimeOutput;
  role?: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  contact: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  bookings: <T = Promise<AsyncIterator<BookingSubscription>>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  contact: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  bookings: <T = FragmentableArray<Booking>>(args?: {
    where?: BookingWhereInput;
    orderBy?: BookingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateBooking {
  count: Int;
}

export interface AggregateBookingPromise
  extends Promise<AggregateBooking>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookingSubscription
  extends Promise<AsyncIterator<AggregateBooking>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateVehicle {
  count: Int;
}

export interface AggregateVehiclePromise
  extends Promise<AggregateVehicle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVehicleSubscription
  extends Promise<AsyncIterator<AggregateVehicle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookingEdge {
  node: Booking;
  cursor: String;
}

export interface BookingEdgePromise extends Promise<BookingEdge>, Fragmentable {
  node: <T = BookingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookingEdgeSubscription
  extends Promise<AsyncIterator<BookingEdge>>,
    Fragmentable {
  node: <T = BookingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VehicleConnection {
  pageInfo: PageInfo;
  edges: VehicleEdge[];
}

export interface VehicleConnectionPromise
  extends Promise<VehicleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VehicleEdge>>() => T;
  aggregate: <T = AggregateVehiclePromise>() => T;
}

export interface VehicleConnectionSubscription
  extends Promise<AsyncIterator<VehicleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VehicleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVehicleSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  surname: String;
  contact: String;
  address?: String;
  city: String;
  state: String;
  zip: String;
  password: String;
  oneTimePin?: String;
  resetTokenExpiry?: DateTimeOutput;
  role?: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  contact: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  resetTokenExpiry: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookingPreviousValues {
  id: ID_Output;
  pickupDate: DateTimeOutput;
  returnDate: DateTimeOutput;
  status: BookingStatus;
}

export interface BookingPreviousValuesPromise
  extends Promise<BookingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pickupDate: () => Promise<DateTimeOutput>;
  returnDate: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
}

export interface BookingPreviousValuesSubscription
  extends Promise<AsyncIterator<BookingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pickupDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  returnDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
}

export interface BookingSubscriptionPayload {
  mutation: MutationType;
  node: Booking;
  updatedFields: String[];
  previousValues: BookingPreviousValues;
}

export interface BookingSubscriptionPayloadPromise
  extends Promise<BookingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookingPreviousValuesPromise>() => T;
}

export interface BookingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookingPreviousValuesSubscription>() => T;
}

export interface Booking {
  id: ID_Output;
  pickupDate: DateTimeOutput;
  returnDate: DateTimeOutput;
  status: BookingStatus;
}

export interface BookingPromise extends Promise<Booking>, Fragmentable {
  id: () => Promise<ID_Output>;
  vehicle: <T = VehiclePromise>() => T;
  user: <T = UserPromise>() => T;
  pickupDate: () => Promise<DateTimeOutput>;
  returnDate: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
}

export interface BookingSubscription
  extends Promise<AsyncIterator<Booking>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  vehicle: <T = VehicleSubscription>() => T;
  user: <T = UserSubscription>() => T;
  pickupDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  returnDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<BookingStatus>>;
}

export interface BookingNullablePromise
  extends Promise<Booking | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  vehicle: <T = VehiclePromise>() => T;
  user: <T = UserPromise>() => T;
  pickupDate: () => Promise<DateTimeOutput>;
  returnDate: () => Promise<DateTimeOutput>;
  status: () => Promise<BookingStatus>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Vehicle {
  id: ID_Output;
  group: VehicleGroup;
  size: VehicleSize;
  name: String;
  model: String;
  make: String;
  year: DateTimeOutput;
  imageURI: String;
  status: VehicleStatus;
  location: Location;
}

export interface VehiclePromise extends Promise<Vehicle>, Fragmentable {
  id: () => Promise<ID_Output>;
  group: () => Promise<VehicleGroup>;
  size: () => Promise<VehicleSize>;
  name: () => Promise<String>;
  model: () => Promise<String>;
  make: () => Promise<String>;
  year: () => Promise<DateTimeOutput>;
  imageURI: () => Promise<String>;
  status: () => Promise<VehicleStatus>;
  location: () => Promise<Location>;
}

export interface VehicleSubscription
  extends Promise<AsyncIterator<Vehicle>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group: () => Promise<AsyncIterator<VehicleGroup>>;
  size: () => Promise<AsyncIterator<VehicleSize>>;
  name: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  make: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<DateTimeOutput>>;
  imageURI: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<VehicleStatus>>;
  location: () => Promise<AsyncIterator<Location>>;
}

export interface VehicleNullablePromise
  extends Promise<Vehicle | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group: () => Promise<VehicleGroup>;
  size: () => Promise<VehicleSize>;
  name: () => Promise<String>;
  model: () => Promise<String>;
  make: () => Promise<String>;
  year: () => Promise<DateTimeOutput>;
  imageURI: () => Promise<String>;
  status: () => Promise<VehicleStatus>;
  location: () => Promise<Location>;
}

export interface VehicleEdge {
  node: Vehicle;
  cursor: String;
}

export interface VehicleEdgePromise extends Promise<VehicleEdge>, Fragmentable {
  node: <T = VehiclePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VehicleEdgeSubscription
  extends Promise<AsyncIterator<VehicleEdge>>,
    Fragmentable {
  node: <T = VehicleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BookingConnection {
  pageInfo: PageInfo;
  edges: BookingEdge[];
}

export interface BookingConnectionPromise
  extends Promise<BookingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookingEdge>>() => T;
  aggregate: <T = AggregateBookingPromise>() => T;
}

export interface BookingConnectionSubscription
  extends Promise<AsyncIterator<BookingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookingSubscription>() => T;
}

export interface VehicleSubscriptionPayload {
  mutation: MutationType;
  node: Vehicle;
  updatedFields: String[];
  previousValues: VehiclePreviousValues;
}

export interface VehicleSubscriptionPayloadPromise
  extends Promise<VehicleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VehiclePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VehiclePreviousValuesPromise>() => T;
}

export interface VehicleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VehicleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VehicleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VehiclePreviousValuesSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vehicle",
    embedded: false
  },
  {
    name: "Booking",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "VehicleSize",
    embedded: false
  },
  {
    name: "VehicleGroup",
    embedded: false
  },
  {
    name: "VehicleStatus",
    embedded: false
  },
  {
    name: "BookingStatus",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["MMF_PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
